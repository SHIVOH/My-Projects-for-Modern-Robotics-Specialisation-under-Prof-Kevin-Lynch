R=[];
obs = [0.0, 0.0, 0.2;0.0, 0.1, 0.2;0.3, 0.2, 0.2;-0.3, -0.2, 0.2;-0.1, -0.4, 0.2;-0.2, 0.3, 0.2;0.3, -0.3, 0.2;0.1, 0.4, 0.2]; ;
for i=1:200
      %samples at start and end config
    if i==1
            q = [i,-0.5,-0.5,2];
            R = [R;q];
    elseif i==200
            q = [i,0.5,0.5,0];
            R = [R;q];
    else
       q = [i , -0.5 + 1.*rand(1), -0.5 + 1.*rand(1)];
       huristic_cost = sqrt((q(2)-0.5)^2 + (q(3)-0.5)^2);
       R = [R;q,huristic_cost];
    end
end
% Adding Edges 

Neighbor =[];
for i =1:200
    N =[];
    count = 0;
    for j = 1:200
      if sqrt((R(i,2)-R(j,2))^2 + (R(i,3)-R(j,3))^2) < 0.5 %checking nodes are near and adding the near nodes for each node
          if count >=100
              break
          else
           count = count+1;
           q = [i,j];
           N = [N;q];
          end
      elseif sqrt((R(i,2)-R(j,2))^2 + (R(i,3)-R(j,3))^2) < 0.8
          if count >=100
              break 
          else
           count = count+1;
           q = [i,j];
           N = [N;q];
          end
      elseif j >120
          if count >=100
              break
          else
           count = count+1;
           q = [i,j];
           N = [N;q];
          end
      end
      
      
      
    end
    Neighbor = [Neighbor;N];
end
for i=1:size(Neighbor,1)
    cost(i)= sqrt((R(Neighbor(i,1),2)-R(Neighbor(i,2),2))^2 + (R(Neighbor(i,1),3)-R(Neighbor(i,2),3))^2);
end
allEdges = [Neighbor,cost']; %the edges
count =0;
edge =[];
edges =[];
edgecount = 0;
for i =1:size(Neighbor,1)
        count= count+1;
        a = R(Neighbor(count,1),3)-R(Neighbor(count,2),3);
        b = R(Neighbor(i,2),2)-R(Neighbor(i,1),2);
        c = -b*R(Neighbor(count,1),3)+ R(Neighbor(i,1),2)*(-a);
        denom =  allEdges(count,3);
        flag =0;
        for k = 1:8
          
          if ((a*obs(k,1)+b*obs(k,2)+c)/denom)>obs(k,3)
              flag = flag+1;
%               if edgecount ==0
%                   edges= [edges;Neighbor(count,1),Neighbor(count,2),allEdges(count,3)];
%                  edgecount = edgecount+1;
%               elseif edgecount ==1
%                   edges= [edges;Neighbor(count,1),Neighbor(count,2),allEdges(count,3)];
%                  edgecount = edgecount+1;
%                   
%                  
%               else
%                  if edges(edgecount,2) ==edges(edgecount-1,2) && edges(edgecount,1) == edges(edgecount-1,1)
%                      'yes'
%                  else
                   
%                    edgecount = edgecount+1;
          end
          
        end
        if flag >0
              edges= [edges;Neighbor(count,1),Neighbor(count,2),allEdges(count,3)];
        end
end
            
             
              
       

nodes = R;
nodes_number = size(nodes,1); % Number of nodes

edges;
edges_number = size(edges,1); % Number of edges
edges_rearranged = -1*ones(nodes_number, nodes_number); % Initialize matrix of costs with -1 (no edge available)

% edge values 
for i = 1:edges_number
    edge_from = edges(i,1);
    edge_to = edges(i,2);
    edge_value = edges(i,3);
    edges_rearranged(edge_from, edge_to) = edge_value;
    edges_rearranged(edge_to, edge_from) = edge_value;
end


parent = nan([nodes_number 1]); % Initialize parents, each position in the array being each node
past_cost = Inf([nodes_number 1]); % Initialize past costs, each position in the array being each node
past_cost(1) = 0; % Past cost for node 1 is 0, leaving the rest infinite
open = 1; % Node 1 starts the search
closed = []; % No node in closed yet

heuristic_cost_to_go = nodes(:,4); % Fetched from the 'edges.csv' file, the array containing the heuristic cost to reach each node

est_total_cost = past_cost + heuristic_cost_to_go; % Initialize estimated cost to go array

% A* algorithm as described in chapter 10.2.4
while(isempty(open) ~= 1)
    current = open(1);
    closed = [closed, current];
    open(1) = [];
    
    if(current == 200)
        % Reconstruct path from parent array
        path_node = 200;
        path = 200;
        for i = nodes_number:-1:1
            if(parent(path_node) == i)
                path = [i path];
                path_node = i;
            end
        end
        % Write path to csv file
        csvwrite('results/path.csv', path);
        break;
    else
        for nbr = 1:nodes_number
            if((edges_rearranged(current, nbr) ~= -1) && (isempty(find(closed==nbr,1)))) 
                tentative_past_cost = past_cost(current)+edges_rearranged(current,nbr); 
                if(tentative_past_cost < past_cost(nbr))
                    past_cost(nbr) = tentative_past_cost;
                    parent(nbr) = current;
                    est_total_cost(nbr) = past_cost(nbr) + heuristic_cost_to_go(nbr);                    
                    if(isempty(find(open==nbr,1)) == 1)
                        open=[open nbr];
                    end                   
                    % open array is sorted according to est total cost
                    temp=0;
                    n=1;
                    for i=1:n
                        for n=1:length(open)
                            if(est_total_cost(i)>est_total_cost(n))
                                a=open(i);
                                open(i)=open(n);
                                open(n)=a;
                            end
                        end
                    end
                end
            end
        end
    end
end
if(isempty(open) == 1)
    % No path found
    csvwrite('results/path.csv', 1);
end
csvwrite('results/nodes.csv', R);
csvwrite('results/edges.csv', edges);
csvwrite('results/obstacles.csv',obs);